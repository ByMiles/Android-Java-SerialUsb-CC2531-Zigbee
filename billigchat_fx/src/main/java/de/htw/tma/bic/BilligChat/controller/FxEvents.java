package de.htw.tma.bic.BilligChat.controller;

import de.htw.tma.bic.ZnpService.eventHandler.CommandEventHandler;
import de.htw.tma.bic.ZnpService.eventHandler.InfoEventHandler;
import de.htw.tma.bic.ZnpService.eventHandler.SendMessageEventHandler;
import de.htw.tma.bic.ZnpService.service.ZnpCodes;
import de.htw.tma.bic.ZnpService.service.ZnpService;
import javafx.beans.value.ChangeListener;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;

/**
 * All znp related events can be generated by calling a public static method.
 * Some events require an instance of a related interface-implementation.
 * For Android this class should be replaced with identical Android compatible events.
 *
 * @version 1.0
 * @author Miles Lorenz
 */
public class FxEvents {

    public static EventHandler<ActionEvent> networkEvent() {
        return event -> {
            if (ZnpService.isConnected()) ZnpService.service().tx().requestNetworkStatus();
        };
    }

    public static EventHandler<ActionEvent> resetEvent() {
        return event -> {
            if (ZnpService.isConnected()) ZnpService.service().tx().resetDevice();
        };
    }

    public static EventHandler<ActionEvent> startCoordinatorEvent() {
        return event -> {
            if (ZnpService.isConnected()) ZnpService.service().tx().startCoordinator();
        };
    }

    public static EventHandler<ActionEvent> startRouterEvent() {
        return event -> {
            if (ZnpService.isConnected()) ZnpService.service().tx().startRouter();
        };
    }


    public static ChangeListener<ZnpCodes.Channels> changeChannelListener() {
        return (observable, oldValue, newValue) -> {
            if (ZnpService.isChangeChannel()) {
                ZnpService.service().tx().setChannels(newValue);
                System.out.println(newValue);
            }
        };
    }

    public static EventHandler<ActionEvent> sendMessageEvent(SendMessageEventHandler handler) {
        return  event -> {
            if (ZnpService.isConnected()) {
                byte[] ip16 = handler.getDestination();

                if (ip16.length == 0)
                    ZnpService.service().tx().sendChatMsg(handler.sendMessage());
                else
                    ZnpService.service().tx().sendChatMsg(ip16, handler.sendMessage());
            }
        };
    }

    public static EventHandler<ActionEvent> infoEvent(InfoEventHandler handler) {
        return event -> {
            if (ZnpService.isConnected()) handler.setInfoText(ZnpService.getUsbInfo());
            else BilligChat.initZnp();
        };
    }

    public static EventHandler<ActionEvent> generateCommandEvent(CommandEventHandler handler) {

        return (handle) -> {
            if (ZnpService.isConnected()) {
                ZnpService.service().tx().sendCommand(
                        handler.getIp16(),
                        handler.getCmd0(),
                        handler.getCmd1(),
                        handler.getMessageBody()
                );
            }
        };
    }
}

